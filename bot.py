import asyncio
import secrets
import random
import os
from datetime import datetime, timedelta, timezone
from typing import Dict, Optional, List, Tuple

from aiogram import Bot, Dispatcher, F
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ChatType, ParseMode
from aiogram.filters import CommandStart, Command
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineQuery,
    InlineQueryResultArticle,
    InputTextMessageContent,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

# ---------- CONFIG ----------
try:
    from dotenv import load_dotenv
    load_dotenv()
except Exception:
    pass

BOT_TOKEN    = os.getenv("BOT_TOKEN", "")
BOT_USERNAME = os.getenv("BOT_USERNAME", "")
ADMIN_ID     = int(os.getenv("ADMIN_ID", "0"))  # –£–∫–∞–∂–∏ —Å–≤–æ–π ID –≤ .env

# ---------- STATES ----------
class SetWallet(StatesGroup):
    waiting_wallet = State()

class CreateDeal(StatesGroup):
    entering = State()

class SellerOnboarding(StatesGroup):
    waiting_wallet = State()

class AdminFlow(StatesGroup):
    waiting_user_for_log   = State()
    waiting_user_for_purge = State()

# ---------- TEXTS ----------
def t(lang: str, key: str) -> str:
    RU = {
        "hello": (
            "üëã <b>MoonGarant</b> ‚Äî –≤–∞—à –Ω–∞–¥—ë–∂–Ω—ã–π –≤—ã–±–æ—Ä –¥–ª—è —Å–¥–µ–ª–æ–∫ —Å —Ü–∏—Ñ—Ä–æ–≤—ã–º–∏ –ø–æ–¥–∞—Ä–∫–∞–º–∏ –∏ NFT –≤ Telegram.\n\n"
            "‚Ä¢ –°–æ–∑–¥–∞–≤–∞–π—Ç–µ –æ—Ä–¥–µ—Ä–∞ –∑–∞ –ø–∞—Ä—É —à–∞–≥–æ–≤\n"
            "‚Ä¢ –î–µ–ª–∏—Ç–µ—Å—å –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Å—Å—ã–ª–∫–æ–π –¥–ª—è –ø—Ä–æ–¥–∞–≤—Ü–∞\n"
            "‚Ä¢ –ê–≤—Ç–æ-—Ç–∞–π–º–µ—Ä—ã: —Å—Å—ã–ª–∫–∞ ‚Äî 30 –º–∏–Ω, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ ‚Äî 15 –º–∏–Ω\n"
            "‚Ä¢ –ö—Ä–∞—Å–∏–≤—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –∏ —É–¥–æ–±–Ω—ã–µ –∫–Ω–æ–ø–∫–∏\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:"
        ),
        "menu": "üè† <b>–ú–µ–Ω—é</b>",

        # SETTINGS
        "settings_title": "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
        "settings_prompt": (
            "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n"
            "–¢–µ–∫—É—â–∏–π —è–∑—ã–∫: <b>{lang_name}</b>\n"
            "–¢–µ–∫—É—â–∏–π –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã: <b>{pay_method}</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –Ω–∏–∂–µ:"
        ),
        "lang_menu_footer": "‚Ü©Ô∏è –í –º–µ–Ω—é / Menu",
        "lang_ru": "üá∑üá∫ –†—É—Å—Å–∫–∏–π",
        "lang_en": "üá¨üáß English",

        "wallet_enter": "üëõ <b>–ö–æ—à–µ–ª—ë–∫</b>\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ TON-–∫–æ—à–µ–ª—å–∫–∞.",
        "wallet_saved": "‚úÖ –ö–æ—à–µ–ª—ë–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: <code>{addr}</code>",
        "wallet_invalid": "‚ö†Ô∏è –ü–æ—Ö–æ–∂–µ, —ç—Ç–æ –Ω–µ TON-–∞–¥—Ä–µ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
        "deal_expired": "‚è≥ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –æ—Ä–¥–µ—Ä–∞ –∏—Å—Ç—ë–∫.",

        # Seller onboarding
        "seller_intro": "üëã –í—ã –ø—Ä–∏–≥–ª–∞—à–µ–Ω—ã –∫ —Å–¥–µ–ª–∫–µ –≤ <b>MoonGarant</b>. –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à TON-–∫–æ—à–µ–ª—ë–∫.",
        "seller_wallet_ok": "‚úÖ –ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –ø—Ä–∏–Ω—è—Ç.\n–ù–∞–∂–º–∏—Ç–µ <b>¬´–ü—Ä–∏–Ω—è—Ç—å –æ—Ä–¥–µ—Ä¬ª</b>, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.",
        "accept_btn": "‚úÖ –ü—Ä–∏–Ω—è—Ç—å –æ—Ä–¥–µ—Ä",
        "seller_details": (
            "üßæ <b>–û—Ä–¥–µ—Ä</b>\n"
            "<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {title}\n"
            "<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {desc}\n"
            "<b>–¶–µ–Ω–∞/—É—Å–ª–æ–≤–∏—è:</b> {price_label}\n"
            "<b>–û—Ç–ø—Ä–∞–≤–∏—Ç—å NFT (–ø–æ–∫—É–ø–∞—Ç–µ–ª—é):</b> {target}\n\n"
            "–ü–æ—Å–ª–µ –ø–µ—Ä–µ–¥–∞—á–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–Ø –ø–µ—Ä–µ–≤—ë–ª(–∞) –ø–æ–¥–∞—Ä–∫–∏¬ª."
        ),
        "seller_stopped": "‚õîÔ∏è –ü—Ä–æ–¥–∞–≤–µ—Ü –æ—Å—Ç–∞–Ω–æ–≤–∏–ª –æ—Ä–¥–µ—Ä. –°–¥–µ–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
        "seller_confirmed_wait": "‚úÖ –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥–∞—Ä–∫–æ–≤ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.\n‚åõ <b>–û–∂–∏–¥–∞–π—Ç–µ –æ–ø–ª–∞—Ç—É, –Ω–µ –±–æ–ª–µ–µ 15 –º–∏–Ω—É—Ç...</b>",
        "seller_final_needed": "üí≥ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å –æ—Ç–º–µ—Ç–∏–ª –æ–ø–ª–∞—Ç—É.\n–ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ ‚Äî –Ω–∞–∂–º–∏—Ç–µ ¬´–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã¬ª.",
        "seller_final_done": "üéâ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –°–¥–µ–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!",

        # Buyer side
        "buyer_notif_confirmed": "‚úÖ –ü—Ä–æ–¥–∞–≤–µ—Ü –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –æ—Ç–ø—Ä–∞–≤–∫—É –ø–æ –æ—Ä–¥–µ—Ä—É <b>{title}</b>.",
        "buyer_pay_prompt_std": (
            "üßæ <b>–î–µ—Ç–∞–ª–∏ –æ—Ä–¥–µ—Ä–∞</b>\n"
            "<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {title}\n"
            "<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {desc}\n"
            "<b>–¶–µ–Ω–∞:</b> {price_value} {method}\n"
            "<b>–ö—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å NFT:</b> {target}\n\n"
            "üí≥ <b>–û–ø–ª–∞—Ç–∞</b>\n"
            "<b>–ö–æ—à–µ–ª—ë–∫ –ø—Ä–æ–¥–∞–≤—Ü–∞:</b> <code>{seller_wallet}</code>\n"
            "<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π/MEMO:</b> <code>{memo}</code>\n\n"
            "‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –£–∫–∞–∂–∏—Ç–µ <b>–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π/MEMO</b> –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ: <code>{memo}</code> ‚Äî –∏–Ω–∞—á–µ –æ–ø–ª–∞—Ç–∞ –Ω–µ –±—É–¥–µ—Ç –∑–∞—Å—á–∏—Ç–∞–Ω–∞!"
        ),
        "buyer_pay_prompt_ex": (
            "üßæ <b>–î–µ—Ç–∞–ª–∏ –æ—Ä–¥–µ—Ä–∞</b>\n"
            "<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {title}\n"
            "<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {desc}\n"
            "<b>–û–±–º–µ–Ω:</b> {exchange_desc}\n"
            "<b>–ö—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å NFT:</b> {target}\n\n"
            "üí≥ <b>–û–ø–ª–∞—Ç–∞</b>\n"
            "<b>–ö–æ—à–µ–ª—ë–∫ –ø—Ä–æ–¥–∞–≤—Ü–∞:</b> <code>{seller_wallet}</code>\n"
            "<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π/MEMO:</b> <code>{memo}</code>\n\n"
            "‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –£–∫–∞–∂–∏—Ç–µ <b>–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π/MEMO</b> –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ: <code>{memo}</code> ‚Äî –∏–Ω–∞—á–µ –æ–ø–ª–∞—Ç–∞ –Ω–µ –±—É–¥–µ—Ç –∑–∞—Å—á–∏—Ç–∞–Ω–∞!"
        ),
        "buyer_wait_confirm": "‚åõ –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –ø—Ä–æ–¥–∞–≤—Ü–æ–º.",
        "buyer_final_done": "‚úÖ –ü—Ä–æ–¥–∞–≤–µ—Ü –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –æ—Ç–ø—Ä–∞–≤–∫—É –ø–æ –æ—Ä–¥–µ—Ä—É <b>{title}</b>.",

        # Create flow prompts (depend on pay method)
        "ask_title": "–í–≤–µ–¥–∏—Ç–µ <b>–Ω–∞–∑–≤–∞–Ω–∏–µ</b> –æ—Ä–¥–µ—Ä–∞.",
        "ask_desc": "–í–≤–µ–¥–∏—Ç–µ <b>–æ–ø–∏—Å–∞–Ω–∏–µ</b> –æ—Ä–¥–µ—Ä–∞ (—Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–æ–≤).",
        "ask_price_std": "–í–≤–µ–¥–∏—Ç–µ <b>—Ü–µ–Ω—É</b> –≤ {method} (–Ω–∞–ø—Ä–∏–º–µ—Ä: <code>12.5</code>).",
        "ask_price_ex": "–£–∫–∞–∂–∏—Ç–µ <b>—É—Å–ª–æ–≤–∏—è –æ–±–º–µ–Ω–∞</b> –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <code>100 STARS -> 12 TON</code>.",
        "ask_user": "–£–∫–∞–∂–∏—Ç–µ <b>@username</b> –ø–æ–∫—É–ø–∞—Ç–µ–ª—è.",
        "bad_price": "‚ö†Ô∏è –ù—É–∂–Ω–æ —á–∏—Å–ª–æ (–º–æ–∂–Ω–æ —Å —Ç–æ—á–∫–æ–π).",
        "bad_user": "‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ username –≤ —Ñ–æ—Ä–º–∞—Ç–µ <code>@username</code>.",

        # Final card (buyer side)
        "final_std": (
            "üßæ <b>–î–µ—Ç–∞–ª–∏ –æ—Ä–¥–µ—Ä–∞</b>\n\n"
            "<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {title}\n"
            "<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {desc}\n"
            "<b>–¶–µ–Ω–∞:</b> {price_value} {method}\n"
            "<b>–ö—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å NFT:</b> {target}\n\n"
            "–ü–æ—Å–ª–µ –ø–µ—Ä–µ—Ö–æ–¥–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞ –ø–æ —Å—Å—ã–ª–∫–µ —É –Ω–µ–≥–æ –±—É–¥–µ—Ç <b>15 –º–∏–Ω—É—Ç</b> –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏.\n\n"
            "<b>–°—Å—ã–ª–∫–∞:</b> {link}"
        ),
        "final_ex": (
            "üßæ <b>–î–µ—Ç–∞–ª–∏ –æ—Ä–¥–µ—Ä–∞</b>\n\n"
            "<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {title}\n"
            "<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {desc}\n"
            "<b>–û–±–º–µ–Ω:</b> {exchange_desc}\n"
            "<b>–ö—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å NFT:</b> {target}\n\n"
            "–ü–æ—Å–ª–µ –ø–µ—Ä–µ—Ö–æ–¥–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞ –ø–æ —Å—Å—ã–ª–∫–µ —É –Ω–µ–≥–æ –±—É–¥–µ—Ç <b>15 –º–∏–Ω—É—Ç</b> –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏.\n\n"
            "<b>–°—Å—ã–ª–∫–∞:</b> {link}"
        ),

        "current_title": "üü° <b>–¢–µ–∫—É—â–∞—è —Å–¥–µ–ª–∫–∞</b>",
        "history_title": "üóÇ <b>–ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫</b> (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10)",
        "no_history": "–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫.",

        # Buttons
        "copy_memo": "üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å MEMO",
        "confirm_paid": "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É",
        "confirm_receive": "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã",

        # Admin
        "admin_title": "üõ°Ô∏è <b>Admin Panel</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        "admin_btn_recent": "üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–¥–µ–ª–∫–∏",
        "admin_btn_chatlog": "üïì –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        "admin_btn_purge": "üßπ –£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        "admin_back": "‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –ø–∞–Ω–µ–ª—å",
        "admin_enter_user": "–û—Ç–ø—Ä–∞–≤—å—Ç–µ @username –∏–ª–∏ —á–∏—Å–ª–æ–≤–æ–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
        "admin_no_log": "–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π —á–∞—Ç–∞ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
        "admin_purged": "üßπ –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ß—Ç–æ —Å–º–æ–≥ ‚Äî —É–¥–∞–ª–∏–ª.",
        "not_admin": "–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω.",
    }
    EN = RU
    return (RU if lang == "ru" else EN)[key]

LANG_NAME = {"ru": "—Ä—É—Å—Å–∫–∏–π", "en": "english"}

# ---------- MEMORY ----------
class Memory:
    def __init__(self):
        self.users: Dict[int, dict] = {}
        self.usernames: Dict[int, str] = {}
        self.deals: Dict[str, dict] = {}
        self.history: Dict[int, List[dict]] = {}

        self.user_msgs: Dict[int, List[int]] = {}      # per-chat: messages to clean on menu
        self.panel_id: Dict[int, int] = {}             # per-chat panel message id

        self.chatlog: Dict[int, List[Tuple[datetime, str, str]]] = {}  # user_id -> [(ts, who, text)]
        self.all_msgs: Dict[int, List[Tuple[int, int]]] = {}           # user_id -> [(chat_id, msg_id)]

        self.wip: Dict[int, dict] = {}

memory = Memory()

def now() -> datetime:
    return datetime.now(timezone.utc)

def get_lang(uid: int) -> str:
    return memory.users.get(uid, {}).get("lang") or "ru"

def set_lang(uid: int, lang: str):
    memory.users.setdefault(uid, {})["lang"] = lang

def set_wallet(uid: int, w: str):
    memory.users.setdefault(uid, {})["wallet"] = w

def get_wallet(uid: int) -> Optional[str]:
    return memory.users.get(uid, {}).get("wallet")

def get_pay_method(uid: int) -> str:
    # –û–¥–∏–Ω –∏–∑: RUB, USD, KZT, STARS, TON, EXCHANGE
    return memory.users.get(uid, {}).get("pay_method") or "TON"

def set_pay_method(uid: int, method: str):
    memory.users.setdefault(uid, {})["pay_method"] = method

def set_warning(uid: int, mid: Optional[int]):
    memory.users.setdefault(uid, {})["warn_id"] = mid

def pop_warning(uid: int) -> Optional[int]:
    d = memory.users.get(uid, {})
    mid = d.get("warn_id")
    if "warn_id" in d:
        del d["warn_id"]
    return mid

def is_ton_address(text: str) -> bool:
    if not text:
        return False
    s = text.strip()
    if s.lower().startswith("ton://"):
        return True
    return 48 <= len(s) <= 66 and all(c.isalnum() or c in "-_:" for c in s)

def has_active_deal(uid: int) -> bool:
    for d in memory.deals.values():
        if d.get("creator_id") == uid and d.get("status") in {"new", "await_payment", "await_seller_final"} and now() < d.get("expires_at", now()):
            return True
    return False

def has_history(uid: int) -> bool:
    return bool(memory.history.get(uid))

def is_admin(uid: int) -> bool:
    return ADMIN_ID and uid == ADMIN_ID

def remember_username(u) -> None:
    if u:
        if getattr(u, "username", None):
            memory.usernames[u.id] = f"@{u.username}"
        else:
            memory.usernames.setdefault(u.id, f"id{u.id}")

# ---------- KEYBOARDS ----------
def main_menu(lang: str, has_active: bool = False, has_history_: bool = False, uid: Optional[int] = None) -> InlineKeyboardMarkup:
    t_ru = ("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "üëõ –ö–æ—à–µ–ª—ë–∫", "üì¶ –°–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É", "üü° –¢–µ–∫—É—â–∞—è —Å–¥–µ–ª–∫–∞", "üóÇ –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫")
    t_en = ("‚öôÔ∏è Settings", "üëõ Wallet", "üì¶ Create deal", "üü° Current deal", "üóÇ Deal history")
    t_local = t_ru if lang == "ru" else t_en
    rows = [
        [InlineKeyboardButton(text=t_local[0], callback_data="settings")],
        [InlineKeyboardButton(text=t_local[1], callback_data="wallet")],
        [InlineKeyboardButton(text=t_local[2], callback_data="create")],
    ]
    if has_active:
        rows.append([InlineKeyboardButton(text=t_local[3], callback_data="current")])
    if has_history_:
        rows.append([InlineKeyboardButton(text=t_local[4], callback_data="history")])
    if uid and is_admin(uid):
        rows.append([InlineKeyboardButton(text="üõ°Ô∏è Admin", callback_data="admin_panel")])
    return InlineKeyboardMarkup(inline_keyboard=rows)

def back_to_menu(lang: str) -> InlineKeyboardMarkup:
    txt = "‚Ü©Ô∏è –í –º–µ–Ω—é" if lang == "ru" else "‚Ü©Ô∏è Menu"
    return InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text=txt, callback_data="menu")]])

def settings_kb(lang: str) -> InlineKeyboardMarkup:
    # —Ä—è–¥ RUB / USD / KZT (–ø–æ –∫–ª–∏–∫—É ‚Äî –≤—ã–±—Ä–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –≤–∞–ª—é—Ç—É)
    # –Ω–∏–∂–µ STARS
    # –Ω–∏–∂–µ TON –∏ –û–ë–ú–ï–ù
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="RUB", callback_data="pay:RUB"),
            InlineKeyboardButton(text="USD", callback_data="pay:USD"),
            InlineKeyboardButton(text="KZT", callback_data="pay:KZT"),
        ],
        [InlineKeyboardButton(text="‚≠ê STARS", callback_data="pay:STARS")],
        [
            InlineKeyboardButton(text="TON", callback_data="pay:TON"),
            InlineKeyboardButton(text="üîÅ –û–±–º–µ–Ω", callback_data="pay:EXCHANGE"),
        ],
        [
            InlineKeyboardButton(text=t("ru","lang_ru"), callback_data="lang_ru"),
            InlineKeyboardButton(text=t("ru","lang_en"), callback_data="lang_en"),
        ],
        [InlineKeyboardButton(text=t("ru","lang_menu_footer"), callback_data="menu")]
    ])

def create_nav_prev_only(lang: str, step: int) -> InlineKeyboardMarkup:
    prev_txt = "‚¨ÖÔ∏è –ü—Ä–µ–¥" if lang == "ru" else "‚¨ÖÔ∏è Prev"
    cancel_txt = "‚õîÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å" if lang == "ru" else "‚õîÔ∏è Cancel"
    menu_txt = "‚Ü©Ô∏è –í –º–µ–Ω—é" if lang == "ru" else "‚Ü©Ô∏è Menu"
    rows = []
    if step > 1:
        rows.append([InlineKeyboardButton(text=prev_txt, callback_data="create_prev")])
    rows.append([InlineKeyboardButton(text=cancel_txt, callback_data="create_cancel")])
    rows.append([InlineKeyboardButton(text=menu_txt, callback_data="menu")])
    return InlineKeyboardMarkup(inline_keyboard=rows)

def final_actions(lang: str, deal_id: str) -> InlineKeyboardMarkup:
    send_txt = "üì© –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–¥–∞–≤—Ü—É" if lang == "ru" else "üì© Send to seller"
    cancel_txt = "‚õîÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å –æ—Ä–¥–µ—Ä" if lang == "ru" else "‚õîÔ∏è Cancel order"
    menu_txt = "‚Ü©Ô∏è –í –º–µ–Ω—é" if lang == "ru" else "‚Ü©Ô∏è Menu"
    btn_send = InlineKeyboardButton(
        text=send_txt,
        switch_inline_query_chosen_chat={"query": f"deal_{deal_id}", "allow_user_chats": True,
                                         "allow_bot_chats": False, "allow_group_chats": True,
                                         "allow_channel_chats": False}
    )
    return InlineKeyboardMarkup(inline_keyboard=[
        [btn_send],
        [InlineKeyboardButton(text=cancel_txt, callback_data=f"deal:{deal_id}:stop")],
        [InlineKeyboardButton(text=menu_txt, callback_data="menu")],
    ])

def seller_controls(lang: str, deal_id: str) -> InlineKeyboardMarkup:
    texts = ("‚õîÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ä–¥–µ—Ä", "‚úÖ –Ø –ø–µ—Ä–µ–≤—ë–ª(–∞) –ø–æ–¥–∞—Ä–∫–∏") if lang == "ru" else ("‚õîÔ∏è Stop order", "‚úÖ I sent the gifts")
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=texts[0], callback_data=f"deal:{deal_id}:stop")],
        [InlineKeyboardButton(text=texts[1], callback_data=f"deal:{deal_id}:confirm")],
    ])

def accept_order_kb(lang: str, deal_id: str) -> InlineKeyboardMarkup:
    txt = t(lang, "accept_btn")
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=txt, callback_data=f"deal:{deal_id}:accept")],
        [InlineKeyboardButton(text=("‚Ü©Ô∏è –í –º–µ–Ω—é" if lang == "ru" else "‚Ü©Ô∏è Menu"), callback_data="menu")]
    ])

def buyer_pay_kb(lang: str, deal_id: str) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=t(lang, "copy_memo"), callback_data=f"memo:{deal_id}")],
        [InlineKeyboardButton(text=t(lang, "confirm_paid"), callback_data=f"paid:{deal_id}")],
        [InlineKeyboardButton(text=("‚Ü©Ô∏è –í –º–µ–Ω—é" if lang == "ru" else "‚Ü©Ô∏è Menu"), callback_data="menu")],
    ])

def seller_final_kb(lang: str, deal_id: str) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=t(lang, "confirm_receive"), callback_data=f"finish:{deal_id}")],
        [InlineKeyboardButton(text=("‚Ü©Ô∏è –í –º–µ–Ω—é" if lang == "ru" else "‚Ü©Ô∏è Menu"), callback_data="menu")],
    ])

def admin_panel_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=t("ru","admin_btn_recent"), callback_data="admin_recent")],
        [InlineKeyboardButton(text=t("ru","admin_btn_chatlog"), callback_data="admin_chatlog")],
        [InlineKeyboardButton(text=t("ru","admin_btn_purge"), callback_data="admin_purge")],
        [InlineKeyboardButton(text=t("ru","admin_back"), callback_data="admin_back_menu")]
    ])

def admin_back_only_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=t("ru","admin_back"), callback_data="admin_back")]
    ])

# ---------- PANEL / LOG ----------
async def show_panel(chat_id: int, text: str, reply_markup: Optional[InlineKeyboardMarkup] = None):
    memory.chatlog.setdefault(chat_id, []).append((now(), "bot", text))
    mid = memory.panel_id.get(chat_id)
    try:
        if mid:
            msg = await bot.edit_message_text(
                chat_id=chat_id,
                message_id=mid,
                text=text,
                reply_markup=reply_markup,
                parse_mode=ParseMode.HTML,
            )
            memory.panel_id[chat_id] = msg.message_id
            memory.all_msgs.setdefault(chat_id, []).append((chat_id, msg.message_id))
            return
    except Exception:
        pass
    msg = await bot.send_message(chat_id, text, reply_markup=reply_markup)
    memory.panel_id[chat_id] = msg.message_id
    memory.all_msgs.setdefault(chat_id, []).append((chat_id, msg.message_id))

async def add_user_msg(m: Message):
    memory.user_msgs.setdefault(m.chat.id, []).append(m.message_id)
    memory.all_msgs.setdefault(m.from_user.id, []).append((m.chat.id, m.message_id))
    memory.chatlog.setdefault(m.from_user.id, []).append((now(), "user", m.text or ""))

async def clear_flow_messages(chat_id: int):
    for mid in memory.user_msgs.get(chat_id, []):
        try:
            await bot.delete_message(chat_id, mid)
        except Exception:
            pass
    memory.user_msgs[chat_id] = []

# ---------- BOT ----------
bot = Bot(BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

async def clear_warn_if_any(uid: int, cid: int):
    wid = pop_warning(uid)
    if wid:
        try:
            await bot.delete_message(cid, wid)
        except Exception:
            pass

# ---------- EXPIRY WORKER ----------
async def expiry_worker():
    while True:
        await asyncio.sleep(5)
        for deal_id, d in list(memory.deals.items()):
            if d.get("status") in ("done", "stopped"):
                continue
            if d.get("expires_at") and now() > d["expires_at"]:
                try:
                    msg = await bot.send_message(d["creator_id"], t(d.get("lang", "ru"), "deal_expired"))
                    memory.all_msgs.setdefault(d["creator_id"], []).append((d["creator_id"], msg.message_id))
                except Exception:
                    pass
                memory.deals.pop(deal_id, None)

# ---------- START ----------
@dp.message(CommandStart())
async def cmd_start(m: Message, state: FSMContext):
    memory.all_msgs.setdefault(m.from_user.id, []).append((m.chat.id, m.message_id))
    remember_username(m.from_user)
    set_lang(m.from_user.id, get_lang(m.from_user.id))
    # –¥–µ—Ñ–æ–ª—Ç –º–µ—Ç–æ–¥–∞ –æ–ø–ª–∞—Ç—ã ‚Äî TON
    if "pay_method" not in memory.users.get(m.from_user.id, {}):
        set_pay_method(m.from_user.id, "TON")

    lang = get_lang(m.from_user.id)

    args = (m.text or "").split(maxsplit=1)
    if len(args) == 2 and args[1].startswith("deal_"):
        deal_id = args[1].split("_", 1)[1]
        d = memory.deals.get(deal_id)
        if not d or now() > d["expires_at"]:
            await show_panel(m.chat.id, t(lang, "deal_expired"), reply_markup=back_to_menu(lang))
            return
        await show_panel(m.chat.id, t(lang, "seller_intro"))
        await state.update_data(deal_id=deal_id)
        await state.set_state(SellerOnboarding.waiting_wallet)
        return

    await show_panel(
        m.chat.id,
        t(lang, "hello"),
        reply_markup=main_menu(lang, has_active_deal(m.from_user.id), has_history(m.from_user.id), uid=m.from_user.id),
    )

# ---------- /admin ----------
@dp.message(Command("admin"))
async def cmd_admin(m: Message, state: FSMContext):
    if not is_admin(m.from_user.id):
        await m.answer(t("ru","not_admin"))
        return
    await state.clear()
    await show_panel(m.chat.id, t("ru","admin_title"), reply_markup=admin_panel_kb())

@dp.callback_query(F.data=="admin_panel")
async def cb_admin_panel(c: CallbackQuery, state: FSMContext):
    if not is_admin(c.from_user.id):
        await c.answer(t("ru","not_admin"), show_alert=True); return
    await state.clear()
    await show_panel(c.message.chat.id, t("ru","admin_title"), reply_markup=admin_panel_kb()); await c.answer()

@dp.callback_query(F.data=="admin_recent")
async def admin_recent(c: CallbackQuery, state: FSMContext):
    if not is_admin(c.from_user.id):
        await c.answer(t("ru","not_admin"), show_alert=True); return
    items = list(memory.deals.values()) + [d for hs in memory.history.values() for d in hs]
    items = sorted(items, key=lambda x: x.get("created_at", now()), reverse=True)[:20]
    if not items:
        text = "üìä <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–¥–µ–ª–∫–∏</b>\n–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö."
    else:
        rows = []
        for d in items:
            cid = d.get("creator_id")
            sid = d.get("seller_id")
            cuser = memory.usernames.get(cid, f"id{cid}") if cid else "-"
            suser = memory.usernames.get(sid, f"id{sid}") if sid else "-"
            price_label = d.get("exchange_desc") or f"{d.get('price','-')} {d.get('method','')}"
            rows.append(
                f"<b>#{d.get('id')}</b> ‚Äî {d.get('status','-')} ‚Äî {price_label}\n"
                f"üè∑ {d.get('title','-')}\n"
                f"üë§ buyer: {cuser} ‚Ä¢ seller: {suser}\n"
            )
        text = "üìä <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–¥–µ–ª–∫–∏</b>\n\n" + "\n".join(rows)
    await show_panel(c.message.chat.id, text, reply_markup=admin_back_only_kb()); await c.answer()

@dp.callback_query(F.data=="admin_chatlog")
async def admin_chatlog(c: CallbackQuery, state: FSMContext):
    if not is_admin(c.from_user.id):
        await c.answer(t("ru","not_admin"), show_alert=True); return
    await state.set_state(AdminFlow.waiting_user_for_log)
    await show_panel(c.message.chat.id, "üïì <b>–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞</b>\n" + t("ru","admin_enter_user"), reply_markup=admin_back_only_kb()); await c.answer()

@dp.message(AdminFlow.waiting_user_for_log)
async def admin_get_log(m: Message, state: FSMContext):
    to_delete = m.message_id
    if not is_admin(m.from_user.id):
        await m.answer(t("ru","not_admin"))
        try: await bot.delete_message(m.chat.id, to_delete)
        except Exception: pass
        return

    query = (m.text or "").strip()
    uid = None
    if query.startswith("@"):
        for _uid, uname in memory.usernames.items():
            if uname.lower() == query.lower():
                uid = _uid; break
    else:
        try: uid = int(query)
        except: uid = None

    if not uid:
        await m.reply("–ù–µ –Ω–∞—à—ë–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –í–≤–µ–¥–∏—Ç–µ @username –∏–ª–∏ ID –µ—â—ë —Ä–∞–∑.")
        try: await bot.delete_message(m.chat.id, to_delete)
        except Exception: pass
        return

    logs = memory.chatlog.get(uid, [])
    if not logs:
        await show_panel(m.chat.id, "üïì <b>–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞</b>\n" + t("ru","admin_no_log"), reply_markup=admin_back_only_kb())
        await state.clear()
        try: await bot.delete_message(m.chat.id, to_delete)
        except Exception: pass
        return

    logs = logs[-50:]
    lines = []
    for ts, who, text in logs:
        ts_local = ts.astimezone().strftime("%d.%m %H:%M:%S")
        prefix = "üë§" if who == "user" else "ü§ñ"
        text = (text or "").strip()
        if len(text) > 500:
            text = text[:500] + "‚Ä¶"
        lines.append(f"{ts_local} {prefix} {text}")
    out = "üïì <b>–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞</b>\n\n" + "\n".join(lines)
    await show_panel(m.chat.id, out, reply_markup=admin_back_only_kb())
    await state.clear()
    try: await bot.delete_message(m.chat.id, to_delete)
    except Exception: pass

@dp.callback_query(F.data=="admin_purge")
async def admin_purge(c: CallbackQuery, state: FSMContext):
    if not is_admin(c.from_user.id):
        await c.answer(t("ru","not_admin"), show_alert=True); return
    await state.set_state(AdminFlow.waiting_user_for_purge)
    await show_panel(c.message.chat.id, "üßπ <b>–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π</b>\n" + t("ru","admin_enter_user"), reply_markup=admin_back_only_kb()); await c.answer()

@dp.message(AdminFlow.waiting_user_for_purge)
async def admin_do_purge(m: Message, state: FSMContext):
    to_delete = m.message_id
    if not is_admin(m.from_user.id):
        await m.answer(t("ru","not_admin"))
        try: await bot.delete_message(m.chat.id, to_delete)
        except Exception: pass
        return

    query = (m.text or "").strip()
    uid = None
    if query.startswith("@"):
        for _uid, uname in memory.usernames.items():
            if uname.lower() == query.lower():
                uid = _uid; break
    else:
        try: uid = int(query)
        except: uid = None
    if not uid:
        await m.reply("–ù–µ –Ω–∞—à—ë–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –í–≤–µ–¥–∏—Ç–µ @username –∏–ª–∏ ID –µ—â—ë —Ä–∞–∑.")
        try: await bot.delete_message(m.chat.id, to_delete)
        except Exception: pass
        return

    removed = 0
    for (chat_id, mid) in list(memory.all_msgs.get(uid, [])):
        try:
            await bot.delete_message(chat_id, mid)
            removed += 1
        except Exception:
            pass
    memory.all_msgs[uid] = []

    try:
        pid = memory.panel_id.get(uid)
        if pid:
            await bot.delete_message(uid, pid)
            removed += 1
            memory.panel_id.pop(uid, None)
    except Exception:
        pass

    await show_panel(m.chat.id, f"üßπ –£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: <b>{removed}</b>\n\n" + t("ru","admin_purged"), reply_markup=admin_back_only_kb())
    await state.clear()
    try: await bot.delete_message(m.chat.id, to_delete)
    except Exception: pass

@dp.callback_query(F.data.in_(["admin_back","admin_back_menu"]))
async def admin_back(c: CallbackQuery, state: FSMContext):
    if not is_admin(c.from_user.id):
        await c.answer(t("ru","not_admin"), show_alert=True); return
    if c.data == "admin_back_menu":
        lang = get_lang(c.from_user.id)
        await show_panel(
            c.message.chat.id,
            t(lang, "hello"),
            reply_markup=main_menu(lang, has_active_deal(c.from_user.id), has_history(c.from_user.id), uid=c.from_user.id),
        )
    else:
        await show_panel(c.message.chat.id, t("ru","admin_title"), reply_markup=admin_panel_kb())
    await state.clear(); await c.answer()

# ---------- WALLET / SETTINGS ----------
@dp.callback_query(F.data == "wallet")
async def cb_wallet(c: CallbackQuery, state: FSMContext):
    lang = get_lang(c.from_user.id)
    await show_panel(c.message.chat.id, t(lang, "wallet_enter"), reply_markup=back_to_menu(lang))
    await state.set_state(SetWallet.waiting_wallet)
    await c.answer()

@dp.message(SetWallet.waiting_wallet, F.chat.type == ChatType.PRIVATE)
async def wallet_set(m: Message, state: FSMContext):
    remember_username(m.from_user)
    lang = get_lang(m.from_user.id)
    await add_user_msg(m)
    txt = (m.text or "").strip()
    if is_ton_address(txt):
        set_wallet(m.from_user.id, txt)
        await show_panel(m.chat.id, t(lang, "wallet_saved").format(addr=txt), reply_markup=back_to_menu(lang))
    else:
        warn = await m.answer(t(lang, "wallet_invalid"))
        set_warning(m.from_user.id, warn.message_id)

def settings_text(uid: int) -> str:
    lang = get_lang(uid)
    lang_name = LANG_NAME.get(lang, lang)
    method = get_pay_method(uid)
    return t(lang, "settings_prompt").format(lang_name=lang_name, pay_method=method)

@dp.callback_query(F.data == "settings")
async def cb_settings(c: CallbackQuery):
    uid = c.from_user.id
    lang = get_lang(uid)
    await show_panel(c.message.chat.id, settings_text(uid), reply_markup=settings_kb(lang))
    await c.answer()

@dp.callback_query(F.data.in_(["lang_ru", "lang_en"]))
async def cb_set_lang(c: CallbackQuery):
    uid = c.from_user.id
    new_lang = "ru" if c.data.endswith("ru") else "en"
    set_lang(uid, new_lang)
    await show_panel(c.message.chat.id, settings_text(uid), reply_markup=settings_kb(new_lang))
    await c.answer()

@dp.callback_query(F.data.startswith("pay:"))
async def cb_set_pay(c: CallbackQuery):
    uid = c.from_user.id
    method = c.data.split(":",1)[1]
    # one of RUB/USD/KZT/STARS/TON/EXCHANGE
    set_pay_method(uid, method)
    lang = get_lang(uid)
    await show_panel(c.message.chat.id, settings_text(uid), reply_markup=settings_kb(lang))
    await c.answer("–ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã –æ–±–Ω–æ–≤–ª—ë–Ω")

# ---------- CREATE FLOW ----------
def wip(uid: int) -> dict:
    # price_value: float|None (–¥–ª—è –≤—Å–µ—Ö –∫—Ä–æ–º–µ EXCHANGE)
    # exchange_desc: str|None (–¥–ª—è EXCHANGE)
    return memory.wip.setdefault(uid, {"step": 1, "title": "", "desc": "", "price_value": None, "exchange_desc": None, "username": ""})

def prompt_for_step(uid: int, draft: dict) -> str:
    lang = get_lang(uid)
    s = draft.get("step", 1)
    if s == 1:
        return t(lang, "ask_title")
    if s == 2:
        return t(lang, "ask_desc")
    if s == 3:
        method = get_pay_method(uid)
        if method == "EXCHANGE":
            return t(lang, "ask_price_ex")
        else:
            return t(lang, "ask_price_std").format(method=method)
    if s == 4:
        return t(lang, "ask_user")
    return "..."

def final_text(uid: int, snap: dict) -> str:
    lang = get_lang(uid)
    if snap.get("exchange_desc"):
        return t(lang, "final_ex").format(
            title=snap["title"], desc=snap["desc"], exchange_desc=snap["exchange_desc"], target=snap["target_user"], link=snap["deep_link"]
        )
    else:
        return t(lang, "final_std").format(
            title=snap["title"], desc=snap["desc"], price_value=snap["price_value"], method=snap["method"], target=snap["target_user"], link=snap["deep_link"]
        )

@dp.callback_query(F.data == "create")
async def cb_create(c: CallbackQuery, state: FSMContext):
    remember_username(c.from_user)
    uid = c.from_user.id
    lang = get_lang(uid)
    memory.user_msgs[c.message.chat.id] = []
    draft = wip(uid)
    draft.update({"step": 1, "title": "", "desc": "", "price_value": None, "exchange_desc": None, "username": ""})
    await state.set_state(CreateDeal.entering)
    await show_panel(c.message.chat.id, prompt_for_step(uid, draft), reply_markup=create_nav_prev_only(lang, draft["step"]))
    await c.answer()

@dp.callback_query(F.data == "create_prev")
async def cb_prev(c: CallbackQuery, state: FSMContext):
    uid = c.from_user.id
    lang = get_lang(uid)
    draft = wip(uid)
    if draft["step"] > 1:
        draft["step"] -= 1
    await show_panel(c.message.chat.id, prompt_for_step(uid, draft), reply_markup=create_nav_prev_only(lang, draft["step"]))
    await c.answer()

@dp.callback_query(F.data == "create_cancel")
async def cb_cancel(c: CallbackQuery, state: FSMContext):
    uid = c.from_user.id
    lang = get_lang(uid)
    memory.wip[uid] = {"step": 1, "title": "", "desc": "", "price_value": None, "exchange_desc": None, "username": ""}
    await clear_flow_messages(c.message.chat.id)
    await show_panel(
        c.message.chat.id,
        t(lang, "hello"),
        reply_markup=main_menu(lang, has_active_deal(uid), has_history(uid), uid=uid),
    )
    await state.clear()
    await c.answer()

@dp.message(CreateDeal.entering)
async def create_input(m: Message, state: FSMContext):
    remember_username(m.from_user)
    uid  = m.from_user.id
    lang = get_lang(uid)
    method = get_pay_method(uid)
    draft = wip(uid)
    await add_user_msg(m)
    text = (m.text or "").strip()

    if draft["step"] == 1:
        draft["title"] = text
        draft["step"] = 2
    elif draft["step"] == 2:
        draft["desc"] = text
        draft["step"] = 3
    elif draft["step"] == 3:
        if method == "EXCHANGE":
            # –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏–Ω–∏–º–∞–µ–º —Å—Ç—Ä–æ–∫—É-–æ–ø–∏—Å–∞–Ω–∏–µ –æ–±–º–µ–Ω–∞
            draft["exchange_desc"] = text
            draft["price_value"] = None
            draft["step"] = 4
        else:
            try:
                price = float(text.replace(",", "."))
                draft["price_value"] = price
                draft["exchange_desc"] = None
                draft["step"] = 4
            except Exception:
                warn = await m.answer(t(lang, "bad_price"))
                set_warning(uid, warn.message_id)
                return
    elif draft["step"] == 4:
        if not (text.startswith("@") and len(text) > 1):
            warn = await m.answer(t(lang, "bad_user"))
            set_warning(uid, warn.message_id)
            return
        draft["username"] = text

        deal_id = secrets.token_urlsafe(8)
        url = f"https://t.me/{BOT_USERNAME}?start=deal_{deal_id}"
        snapshot = {
            "id": deal_id,
            "creator_id": uid,
            "creator_username": memory.usernames.get(uid, f"id{uid}"),
            "title": draft["title"],
            "desc": draft["desc"],
            "price_value": draft["price_value"],   # float –∏–ª–∏ None
            "exchange_desc": draft["exchange_desc"],  # str –∏–ª–∏ None
            "method": method,                      # RUB/USD/KZT/STARS/TON/EXCHANGE
            "target_user": draft["username"],
            "lang": lang,
            "status": "new",
            "created_at": now(),
            "expires_at": now() + timedelta(minutes=30),
            "seller_id": None,
            "seller_deadline": None,
            "deep_link": url,
            "seller_wallet": None,
            "memo": None,
        }
        memory.deals[deal_id] = snapshot

        await clear_flow_messages(m.chat.id)
        await show_panel(m.chat.id, final_text(uid, snapshot), reply_markup=final_actions(lang, deal_id))

        memory.wip[uid] = {"step": 1, "title": "", "desc": "", "price_value": None, "exchange_desc": None, "username": ""}
        await state.clear()
        return

    await show_panel(m.chat.id, prompt_for_step(uid, draft), reply_markup=create_nav_prev_only(lang, draft["step"]))

# ---------- SELLER ONBOARDING ----------
@dp.message(SellerOnboarding.waiting_wallet)
async def seller_wallet(m: Message, state: FSMContext):
    remember_username(m.from_user)
    lang = get_lang(m.from_user.id)
    await add_user_msg(m)
    txt = (m.text or "").strip()
    if not is_ton_address(txt):
        warn = await m.answer(t(lang, "wallet_invalid"))
        set_warning(m.from_user.id, warn.message_id)
        return

    data = await state.get_data()
    deal_id = data.get("deal_id")
    d = memory.deals.get(deal_id)
    if not d:
        await show_panel(m.chat.id, t(lang, "deal_expired"), reply_markup=back_to_menu(lang))
        await state.clear()
        return

    set_wallet(m.from_user.id, txt)
    d["seller_id"] = m.from_user.id
    d["seller_username"] = memory.usernames.get(m.from_user.id, f"id{m.from_user.id}")
    d["seller_wallet"] = txt
    memory.deals[deal_id] = d

    try:
        await bot.delete_message(m.chat.id, m.message_id)  # —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ—à–µ–ª—å–∫–æ–º
    except Exception:
        pass
    await clear_flow_messages(m.chat.id)

    price_label = d.get("exchange_desc") or (f"{d['price_value']} {d['method']}" if d.get("price_value") is not None else d.get("method"))
    await show_panel(
        m.chat.id,
        t(lang, "seller_wallet_ok"),
        reply_markup=accept_order_kb(lang, deal_id),
    )
    await state.clear()

# ---------- SELLER/BUYER ACTIONS ----------
@dp.callback_query(F.data.startswith("deal:"))
async def seller_action(c: CallbackQuery):
    remember_username(c.from_user)
    parts = c.data.split(":")
    _, deal_id, action = parts
    d = memory.deals.get(deal_id)
    lang = get_lang(c.from_user.id)

    if not d:
        await show_panel(c.message.chat.id, t(lang, "deal_expired"), reply_markup=back_to_menu(lang))
        await c.answer()
        return

    if action == "accept":
        price_label = d.get("exchange_desc") or (f"{d['price_value']} {d['method']}" if d.get("price_value") is not None else d.get("method"))
        await show_panel(
            c.message.chat.id,
            t(lang, "seller_details").format(title=d["title"], desc=d["desc"], price_label=price_label, target=d["target_user"]),
            reply_markup=seller_controls(lang, deal_id),
        )
        await c.answer(); return

    if action == "stop":
        d["status"] = "stopped"
        await show_panel(c.message.chat.id, t(lang, "seller_stopped"), reply_markup=back_to_menu(lang))
        try:
            msg = await bot.send_message(d["creator_id"], f"‚õîÔ∏è –ü—Ä–æ–¥–∞–≤–µ—Ü –æ—Å—Ç–∞–Ω–æ–≤–∏–ª –æ—Ä–¥–µ—Ä <b>{d['title']}</b>.")
            memory.all_msgs.setdefault(d["creator_id"], []).append((d["creator_id"], msg.message_id))
        except Exception:
            pass
        memory.history.setdefault(d["creator_id"], []).insert(0, d.copy())
        memory.deals.pop(deal_id, None)
        await c.answer(); return

    if action == "confirm":
        if not d.get("seller_wallet"):
            await c.answer("–°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ –∫–æ—à–µ–ª—ë–∫.", show_alert=True); return

        delay = random.randint(4, 7)
        await show_panel(c.message.chat.id, "‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è...", reply_markup=None)
        await asyncio.sleep(delay)

        d["status"] = "await_payment"
        d["seller_deadline"] = now() + timedelta(minutes=15)
        memo = "MG-" + secrets.token_urlsafe(4).upper().replace("_", "").replace("-", "")
        d["memo"] = memo
        memory.deals[deal_id] = d

        await show_panel(c.message.chat.id, t(lang, "seller_confirmed_wait"), reply_markup=back_to_menu(lang))

        buyer_lang = get_lang(d["creator_id"])
        if d.get("exchange_desc"):
            buyer_text = (
                t(buyer_lang, "buyer_notif_confirmed").format(title=d["title"]) + "\n\n" +
                t(buyer_lang, "buyer_pay_prompt_ex").format(
                    title=d["title"], desc=d["desc"], exchange_desc=d["exchange_desc"],
                    target=d["target_user"], seller_wallet=d["seller_wallet"], memo=memo
                )
            )
        else:
            buyer_text = (
                t(buyer_lang, "buyer_notif_confirmed").format(title=d["title"]) + "\n\n" +
                t(buyer_lang, "buyer_pay_prompt_std").format(
                    title=d["title"], desc=d["desc"], price_value=d["price_value"], method=d["method"],
                    target=d["target_user"], seller_wallet=d["seller_wallet"], memo=memo
                )
            )
        await show_panel(d["creator_id"], buyer_text, reply_markup=buyer_pay_kb(buyer_lang, deal_id))
        await c.answer(); return

@dp.callback_query(F.data.startswith("memo:"))
async def copy_memo(c: CallbackQuery):
    deal_id = c.data.split(":", 1)[1]
    d = memory.deals.get(deal_id)
    if not d or not d.get("memo"):
        await c.answer("MEMO –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.", show_alert=True); return
    await c.answer(f"MEMO: {d['memo']}", show_alert=True)

@dp.callback_query(F.data.startswith("paid:"))
async def buyer_paid(c: CallbackQuery):
    deal_id = c.data.split(":", 1)[1]
    d = memory.deals.get(deal_id)
    lang = get_lang(c.from_user.id)
    if not d:
        await c.answer("–û—Ä–¥–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.", show_alert=True); return
    if c.from_user.id != d["creator_id"]:
        await c.answer("–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ.", show_alert=True); return

    d["status"] = "await_seller_final"
    memory.deals[deal_id] = d

    await show_panel(c.message.chat.id, t(lang, "buyer_wait_confirm"), reply_markup=back_to_menu(lang))

    seller_lang = get_lang(d.get("seller_id") or c.from_user.id)
    await show_panel(
        d["seller_id"],
        t(seller_lang, "seller_final_needed"),
        reply_markup=seller_final_kb(seller_lang, deal_id)
    )
    await c.answer("–û—Ç–º–µ—á–µ–Ω–æ. –û–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–æ–¥–∞–≤—Ü–∞.")

@dp.callback_query(F.data.startswith("finish:"))
async def seller_finish(c: CallbackQuery):
    deal_id = c.data.split(":", 1)[1]
    d = memory.deals.get(deal_id)
    lang = get_lang(c.from_user.id)
    if not d:
        await c.answer("–û—Ä–¥–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.", show_alert=True); return
    if c.from_user.id != d.get("seller_id"):
        await c.answer("–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ.", show_alert=True); return

    d["status"] = "done"
    memory.history.setdefault(d["creator_id"], []).insert(0, d.copy())

    await show_panel(c.message.chat.id, t(lang, "seller_final_done"), reply_markup=back_to_menu(lang))

    buyer_lang = get_lang(d["creator_id"])
    await show_panel(d["creator_id"], t(buyer_lang, "buyer_final_done").format(title=d["title"]), reply_markup=back_to_menu(buyer_lang))

    memory.deals.pop(deal_id, None)
    await c.answer("–ì–æ—Ç–æ–≤–æ.")

# ---------- CURRENT / HISTORY ----------
@dp.callback_query(F.data == "current")
async def cb_current(c: CallbackQuery):
    lang = get_lang(c.from_user.id)
    active = [
        d for d in memory.deals.values()
        if d.get("creator_id") == c.from_user.id
        and d.get("status") in {"new", "await_payment", "await_seller_final"}
        and now() < d.get("expires_at", now())
    ]
    if not active:
        await show_panel(
            c.message.chat.id,
            t(lang, "hello"),
            reply_markup=main_menu(lang, False, has_history(c.from_user.id), uid=c.from_user.id),
        )
        await c.answer(); return

    d = sorted(active, key=lambda x: x["created_at"], reverse=True)[0]
    txt = final_text(c.from_user.id, d)
    await show_panel(
        c.message.chat.id,
        t(lang, "current_title") + "\n\n" + txt,
        reply_markup=final_actions(lang, d["id"]),
    )
    await c.answer()

@dp.callback_query(F.data == "history")
async def cb_history(c: CallbackQuery):
    lang = get_lang(c.from_user.id)
    items = memory.history.get(c.from_user.id, [])[:10]
    if not items:
        await show_panel(c.message.chat.id, t(lang, "history_title") + "\n" + t(lang, "no_history"), reply_markup=back_to_menu(lang))
        await c.answer(); return

    lines = []
    for i, d in enumerate(items, 1):
        when = d.get("created_at")
        if when:
            try: when = when.astimezone().strftime("%d.%m %H:%M")
            except Exception: when = "-"
        else:
            when = "-"
        price_label = d.get("exchange_desc") or (f"{d['price_value']} {d['method']}" if d.get("price_value") is not None else d.get("method"))
        lines.append(f"{i}. <b>{d.get('title') or '[title]'}</b> ‚Äî {price_label} ‚Äî {d.get('status','done')} ‚Äî {when}")

    await show_panel(c.message.chat.id, t(lang, "history_title") + "\n\n" + "\n".join(lines), reply_markup=back_to_menu(lang))
    await c.answer()

# ---------- MENU ----------
@dp.callback_query(F.data == "menu")
async def cb_menu(c: CallbackQuery):
    lang = get_lang(c.from_user.id)
    await clear_warn_if_any(c.from_user.id, c.message.chat.id)
    await clear_flow_messages(c.message.chat.id)
    await show_panel(
        c.message.chat.id,
        t(lang, "hello"),
        reply_markup=main_menu(lang, has_active_deal(c.from_user.id), has_history(c.from_user.id), uid=c.from_user.id),
    )
    await c.answer()

# ---------- INLINE SHARE ----------
@dp.inline_query()
async def inline_share(iq: InlineQuery):
    q = (iq.query or "").strip()
    results = []
    if q.startswith("deal_"):
        deal_id = q.split("_", 1)[1]
        d = memory.deals.get(deal_id)
        if d:
            url = d["deep_link"]
            text = f"{url}\n\nMoonGarant - –≤–∞—à –≤—ã–±–æ—Ä –≤ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–∏ —Å–¥–µ–ª–æ–∫!"
            results.append(
                InlineQueryResultArticle(
                    id=deal_id,
                    title="MoonGarant ‚Ä¢ –°—Å—ã–ª–∫–∞ –Ω–∞ —Å–¥–µ–ª–∫—É",
                    description=(d.get("exchange_desc") or f"{d.get('price_value')} {d.get('method')}") + f" ‚Ä¢ {d['target_user']}",
                    input_message_content=InputTextMessageContent(message_text=text, parse_mode=ParseMode.HTML),
                )
            )
    await iq.answer(results=results, cache_time=0, is_personal=True)

# ---------- GUARD ----------
@dp.message(F.chat.type == ChatType.PRIVATE)
async def guard_delete_noise(m: Message, state: FSMContext):
    remember_username(m.from_user)
    current = await state.get_state()
    txt = (m.text or "").strip()
    if current is None and txt != "/start" and not txt.startswith("/admin"):
        try:
            await m.delete()
        except Exception:
            pass
    else:
        memory.chatlog.setdefault(m.from_user.id, []).append((now(), "user", m.text or ""))

# ---------- MAIN ----------
async def main():
    if not BOT_TOKEN:
        raise RuntimeError("BOT_TOKEN is empty. Put it into .env")
    asyncio.create_task(expiry_worker())
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
